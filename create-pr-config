#!/bin/bash

# create-pr-config - Configuration management for create-pr
# This script can be sourced to load config or run standalone to manage config

# Debug print function (stub for when sourced)
debug_print() {
    # Only print if DRY_RUN is set and true
    if [ "${DRY_RUN:-false}" = true ]; then
        echo "[CONFIG DEBUG] $1" >&2
    fi
}

# Default configuration values
DEFAULT_TEMPLATE=true
DEFAULT_DRAFT=true
DEFAULT_OPEN=true
DEFAULT_BASE_BRANCH="master"
DEFAULT_LYRICS_FILE="./lyrics"

# Configuration file path
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/create-pr"
CONFIG_FILE="$CONFIG_DIR/config"

# Ensure config directory exists
ensure_config_dir() {
    if [ ! -d "$CONFIG_DIR" ]; then
        mkdir -p "$CONFIG_DIR"
        debug_print "Created config directory: $CONFIG_DIR"
    fi
}

# Load configuration from file
load_config() {
    # Set defaults first
    CONFIG_TEMPLATE="$DEFAULT_TEMPLATE"
    CONFIG_DRAFT="$DEFAULT_DRAFT"
    CONFIG_OPEN="$DEFAULT_OPEN"
    CONFIG_BASE_BRANCH="$DEFAULT_BASE_BRANCH"
    CONFIG_LYRICS_FILE="$DEFAULT_LYRICS_FILE"
    
    # Load from config file if it exists
    if [ -f "$CONFIG_FILE" ]; then
        debug_print "Loading config from: $CONFIG_FILE"
        
        # Source the config file safely
        while IFS='=' read -r key value; do
            # Skip comments and empty lines
            [[ $key =~ ^[[:space:]]*# ]] && continue
            [[ -z $key ]] && continue
            
            # Remove leading/trailing whitespace
            key=$(echo "$key" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            value=$(echo "$value" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            
            # Remove quotes from value if present
            value=$(echo "$value" | sed 's/^["'\'']\(.*\)["'\'']$/\1/')
            
            case "$key" in
                template) CONFIG_TEMPLATE="$value" ;;
                draft) CONFIG_DRAFT="$value" ;;
                open) CONFIG_OPEN="$value" ;;
                base_branch) CONFIG_BASE_BRANCH="$value" ;;
                lyrics_file) CONFIG_LYRICS_FILE="$value" ;;
            esac
        done < "$CONFIG_FILE"
        
        debug_print "Config loaded - template:$CONFIG_TEMPLATE, draft:$CONFIG_DRAFT, open:$CONFIG_OPEN, base_branch:$CONFIG_BASE_BRANCH"
    else
        debug_print "No config file found, using defaults"
    fi
}

# Save a configuration value
save_config_value() {
    local key="$1"
    local value="$2"
    
    ensure_config_dir
    
    # Create config file if it doesn't exist
    if [ ! -f "$CONFIG_FILE" ]; then
        cat > "$CONFIG_FILE" << 'EOF'
# create-pr configuration file
# Valid values: true/false for boolean options
# Example: template=false

# Use PR template by default
template=true

# Create as draft by default
draft=true

# Open in browser by default
open=true

# Default base branch
base_branch=master

# Custom lyrics file path (optional)
lyrics_file=
EOF
    fi
    
    # Update the value in the config file
    if grep -q "^${key}=" "$CONFIG_FILE"; then
        # Key exists, update it
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS sed
            sed -i '' "s/^${key}=.*/${key}=${value}/" "$CONFIG_FILE"
        else
            # Linux sed
            sed -i "s/^${key}=.*/${key}=${value}/" "$CONFIG_FILE"
        fi
    else
        # Key doesn't exist, append it
        echo "${key}=${value}" >> "$CONFIG_FILE"
    fi
    
    echo "✅ Set ${key}=${value}"
}

# Show current configuration
show_config() {
    load_config
    
    echo "📋 Current create-pr configuration:"
    echo ""
    echo "  template      = $CONFIG_TEMPLATE"
    echo "  draft         = $CONFIG_DRAFT" 
    echo "  open          = $CONFIG_OPEN"
    echo "  base_branch   = $CONFIG_BASE_BRANCH"
    echo "  lyrics_file   = ${CONFIG_LYRICS_FILE:-<not set>}"
    echo ""
    echo "Config file: $CONFIG_FILE"
}

# Reset configuration to defaults
reset_config() {
    ensure_config_dir
    
    cat > "$CONFIG_FILE" << EOF
# create-pr configuration file
# Valid values: true/false for boolean options

# Use PR template by default
template=$DEFAULT_TEMPLATE

# Create as draft by default
draft=$DEFAULT_DRAFT

# Open in browser by default
open=$DEFAULT_OPEN

# Default base branch
base_branch=$DEFAULT_BASE_BRANCH

# Custom lyrics file path (optional)
lyrics_file=$DEFAULT_LYRICS_FILE
EOF

    echo "✅ Configuration reset to defaults"
    show_config
}

# Validate boolean value
validate_boolean() {
    local value="$1"
    case "$value" in
        true|false) return 0 ;;
        *) return 1 ;;
    esac
}

# Main function for standalone usage
main() {
    case "${1:-}" in
        "set")
            if [ $# -lt 3 ]; then
                echo "Usage: create-pr config set <key> <value>"
                echo ""
                echo "Available keys:"
                echo "  template      (true/false)"
                echo "  draft         (true/false)"
                echo "  open          (true/false)"
                echo "  base_branch   (branch name)"
                echo "  lyrics_file   (file path)"
                exit 1
            fi
            
            local key="$2"
            local value="$3"
            
            # Validate key
            case "$key" in
                template|draft|open)
                    if ! validate_boolean "$value"; then
                        echo "❌ Error: $key must be 'true' or 'false'"
                        exit 1
                    fi
                    ;;
                base_branch)
                    if [ -z "$value" ]; then
                        echo "❌ Error: base_branch cannot be empty"
                        exit 1
                    fi
                    ;;
                lyrics_file)
                    # lyrics_file can be empty or a path
                    ;;
                *)
                    echo "❌ Error: Unknown key '$key'"
                    echo "Valid keys: template, draft, open, base_branch, lyrics_file"
                    exit 1
                    ;;
            esac
            
            save_config_value "$key" "$value"
            ;;
        "show"|"")
            show_config
            ;;
        "reset")
            reset_config
            ;;
        "edit")
            ensure_config_dir
            if [ ! -f "$CONFIG_FILE" ]; then
                reset_config > /dev/null
            fi
            ${EDITOR:-nano} "$CONFIG_FILE"
            echo "✅ Config file edited"
            ;;
        *)
            echo "create-pr configuration management"
            echo ""
            echo "Usage: create-pr config <command>"
            echo ""
            echo "Commands:"
            echo "  show                    Show current configuration"
            echo "  set <key> <value>       Set a configuration value"
            echo "  reset                   Reset to default configuration"
            echo "  edit                    Edit configuration file"
            echo ""
            echo "Examples:"
            echo "  create-pr config set base_branch main"
            echo "  create-pr config set template false"
            echo "  create-pr config set draft false"
            echo "  create-pr config show"
            exit 1
            ;;
    esac
}

# If this script is run directly (not sourced), run main
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi 